// SPDX-License-Identifier: MIT
namespace did {

};

// did_tdw

[ExternalInterface="did_tdw"]
typedef extern TrustDidWebIdResolutionError;

[ExternalInterface="did_tdw"]
typedef extern TrustDidWebId;

[ExternalInterface="did_tdw"]
typedef extern TrustDidWebError;

[ExternalInterface="did_tdw"]
typedef extern TrustDidWeb;

// did_webvh

[ExternalInterface="did_webvh"]
typedef extern WebVerifiableHistoryIdResolutionError;

[ExternalInterface="did_webvh"]
typedef extern WebVerifiableHistoryId;

[ExternalInterface="did_webvh"]
typedef extern WebVerifiableHistoryError;

[ExternalInterface="did_webvh"]
typedef extern WebVerifiableHistory;

// did_sidekicks

[External="did_sidekicks"]
typedef extern Jwk;

[External="did_sidekicks"]
typedef extern VerificationType;

[External="did_sidekicks"]
typedef extern VerificationMethod;

// Used below in: interface Did
[ExternalInterface="did_sidekicks"]
typedef extern DidDoc;

[ExternalInterface="did_sidekicks"]
typedef extern DidLogEntryJsonSchema;

[ExternalInterface="did_sidekicks"]
typedef extern DidLogEntryValidatorError;

[ExternalInterface="did_sidekicks"]
typedef extern DidLogEntryValidator;

[Error]
enum DidResolveError {
    "DidNotSupported",
    "MalformedDid",
    "InvalidDidLog"
};

interface Did {
    [Throws=DidResolveError]
    constructor(string did_tdw);
    /// Returns the url part from the supplied DID, if supported and not malformed.
    [Throws=DidResolveError]
    string get_url();
    [Throws=DidResolveError]
    DidDoc resolve(string did_tdw_log);
};