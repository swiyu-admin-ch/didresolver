// SPDX-License-Identifier: MIT
namespace did {

};

// did_tdw

[External="did_tdw"]
typedef enum TrustDidWebIdResolutionError;

[External="did_tdw"]
typedef struct TrustDidWebId;

[External="did_tdw"]
typedef enum TrustDidWebError;

[External="did_tdw"]
typedef struct TrustDidWeb;

// did_webvh

[External="did_webvh"]
typedef enum WebVerifiableHistoryIdResolutionError;

[External="did_webvh"]
typedef struct WebVerifiableHistoryId;

[External="did_webvh"]
typedef enum WebVerifiableHistoryError;

[External="did_webvh"]
typedef struct WebVerifiableHistory;

// did_sidekicks

[External="did_sidekicks"]
typedef struct Jwk;

[External="did_sidekicks"]
typedef enum VerificationType;

[External="did_sidekicks"]
typedef struct VerificationMethod;

// Returned by `Did`'s method resolve
[External="did_sidekicks"]
typedef interface DidDoc;

[External="did_sidekicks"]
typedef trait DidLogEntryJsonSchema;

[External="did_sidekicks"]
typedef enum DidLogEntryValidatorError;

[External="did_sidekicks"]
typedef struct DidLogEntryValidator;

/// The error accompanying `Did`.
/// It might occur while calling some of the `Did` constructors/methods.
[Error]
enum DidResolveError {
    /// The supplied DID is not supported. Currently supported are: did:tdw, did:webvh
    "DidNotSupported",
    /// The supplied DID is supported, but is malformed
    "MalformedDid",
    /// The supplied DID log is invalid
    "InvalidDidLog",
    /// The supplied DID log is valid, but it features invalid DID Doc
    "InvalidDidDoc"
};

/// Represents a Decentralized Identifier (DID) in terms of DID Web + Verifiable History (`did:webvh`)
/// that is an enhancement to the `did:web` DID method, providing complementary features, as specified by
/// https://identity.foundation/didwebvh.
///
/// Also, the legacy DID method `did:tdw` is supported as well.
interface Did {
    /// The single constructor of `Did` expecting a
    /// DID method-specific identifier (defined as https://identity.foundation/didwebvh/next/#method-specific-identifier) as either a
    /// `did:tdw:0.3` DID (w.r.t. https://identity.foundation/didwebvh/v0.3) or a
    /// `did:webvh:1.0` DID (w.r.t. https://identity.foundation/didwebvh/v1.0).
    ///
    /// The constructor will attempt to *transform* (w.r.t. https://identity.foundation/didwebvh/next/#the-did-to-https-transformation)
    /// the supplied DID method identifier into a valid RFC3986-conform HTTPS URL thus enabling retrival
    /// of its DID log (via an `HTTP GET`). In case of error, the available `DidResolveError`
    /// object features all the detailed information required to narrow down the root cause.
    [Throws=DidResolveError]
    constructor(string did);
    /// Returns the HTTPS URL "transformed" (w.r.t. https://identity.foundation/didwebvh/next/#the-did-to-https-transformation)
    /// from the DID supplied via constructor.
    ///
    /// @deprecated as of 2.2.0 replaced by `get_https_url`
    [Throws=DidResolveError]
    string get_url();
    /// Returns the HTTPS URL "transformed" (w.r.t. https://identity.foundation/didwebvh/next/#the-did-to-https-transformation)
    /// from the DID supplied via constructor.
    string get_https_url();
    /// The essential method of `Did` implementing the "Read (Resolve)" DID method operation for either a
    /// `did:tdw:0.3` (w.r.t. https://identity.foundation/didwebvh/v0.3/#read-resolve) or a
    /// `did:webvh:1.0` DID (w.r.t. https://identity.foundation/didwebvh/v1.0/#read-resolve).
    ///
    /// In case of error, the available `DidResolveError` object features all the detailed
    /// information required to narrow down the root cause.
    [Throws=DidResolveError]
    DidDoc resolve(string did_log);
};