// SPDX-License-Identifier: MIT
namespace did {

};

// did_tdw

[External="did_tdw"]
typedef enum TrustDidWebIdResolutionError;

[External="did_tdw"]
typedef struct TrustDidWebId;

[External="did_tdw"]
typedef enum TrustDidWebError;

[External="did_tdw"]
typedef struct TrustDidWeb;

// did_webvh

[External="did_webvh"]
typedef enum WebVerifiableHistoryIdResolutionError;

[External="did_webvh"]
typedef struct WebVerifiableHistoryId;

[External="did_webvh"]
typedef enum WebVerifiableHistoryError;

[External="did_webvh"]
typedef struct WebVerifiableHistory;

// did_sidekicks

[External="did_sidekicks"]
typedef struct Jwk;

[External="did_sidekicks"]
typedef enum VerificationType;

[External="did_sidekicks"]
typedef struct VerificationMethod;

// Returned by `Did`'s method resolve
[External="did_sidekicks"]
typedef struct DidDoc;

[External="did_sidekicks"]
typedef trait DidLogEntryJsonSchema;

[External="did_sidekicks"]
typedef enum DidLogEntryValidatorError;

[External="did_sidekicks"]
typedef struct DidLogEntryValidator;

[Error]
enum DidResolveError {
    /// The supplied DID is not supported. Currently supported are: did:tdw, did:webvh
    "DidNotSupported",
    /// The supplied DID is supported, but is malformed
    "MalformedDid",
    /// The supplied DID log is invalid
    "InvalidDidLog",
    /// The supplied DID log is valid, but it features invalid DID Doc
    "InvalidDidDoc"
};

interface Did {
    [Throws=DidResolveError]
    constructor(string did_tdw);
    /// Returns the url part from the supplied DID, if supported and not malformed.
    [Throws=DidResolveError]
    string get_url();
    [Throws=DidResolveError]
    DidDoc resolve(string did_tdw_log);
};